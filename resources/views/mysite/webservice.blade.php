
@extends('layouts.main8')

@section('content')

    <div class="row">
        <div class="col-md-12">
            <h2 class="text-center text-design2">{{ trans('site.m_webapi') }}</h2> <br/>
        </div>
        <div class="col-md-7">
            <p class="text-justify">
                <b>Web Service</b> - это веб сервис, являющееся понятием более расширенным по сравнению с понятием
                обычного веб, он предоставляет необработанную информацию, и сложен для большинства пользователей.
                Поэтому он используется приложениями. Эти приложения анализируют данные перед тем как вернуть
                их конечному пользователю. <br/><br/>

                Чтобы получить данные прогноза погоды, приложению ABC нужно взять информацию из определенного ресурса?
                это может веб сервис, который предоставляет данные погоды соответсвтующие разным регионам. <br/><br/>

                Индентично, чтобы получить данные про акции, приложение ABC тоже должно связать с веб сервисом
                предоставляющим эти данные. Данные будут обработаны перед тем как вернуть вам полный вебсайт.
                Web Service часто предоставляют необработанные данные, которые сложно понять большинству обычных
                пользователей, они обычно возвращаются в формате XML или JSON. <br/><br/>
            </p>
        </div>
        <div class="col-md-5">
            <img src="/img/api.jpg" alt="Landing page" title="Landing page" class="img-fluid" />
        </div>

        <div class="col-md-5">
            <img src="/img/api2.png" alt="Landing page" title="Landing page" class="img-fluid" />
        </div>
        <div class="col-md-7">
            <p class="text-justify">
                RESTful Web Service это  Web Service написан на основании структуры  REST. REST уже широко используется
                и заменяет  Web Service основываясь на  SOAP и WSDL. RESTful Web Service легкий (lightweigh), легко
                расширить и поддерживать. <br/><br/>
                Первые понятия про  REST ( REpresentational State Transfer) были введены в 2000 году в докторской
                диссертации  Roy Thomas Fielding (соучредитель HTTP). В диссертации он детально знакомит с ограничениями,
                правилами, как и со способами выполнения в системе для получения системы REST. <br/><br/>
            </p>
        </div>
        <div class="col-md-7">
            <p class="text-justify">
                REST определяет правила архитектуры для дизайна ваших  Web services, фокусируется на систематических
                ресурсах, включая какого формата состояние ресурсов и передается по  HTTP, и написан разными языками.
                Если посчитать по количеству использующих веб сервисов, REST стал популярным за прошедшие годы как
                сервис модели дизайна с преимуществом. На самом деле, REST имеет большое влияние и почти заменил SOAP
                и  WSDL так как его намного проще и легче использовать. <br/><br/>

                REST это набор правил для создания приложения  Web Service, который следует 4 основным правилам дизайна: <br/>
                - Использовать явные методы HTTP <br/>
                - Не имеет состояния <br/>
                - Отображает структуру папок как URls <br/>
                - Передача JavaScript Object Notation (JSON), XML или обоих. <br/><br/>

                REST ставит правило, требующее проммистов определить их цель через метод  HTTP. Обычно эти цели включают
                получение данных, вставить данные, обновление данных или удаление данных. Поэтому когда вы хотите
                выполнить одну из задач выше, заметьте следующие правила: <br/><br/>

                - Чтобы создать ресурс на сервере, вам нужно использовать метод <b>POST</b>. <br/>
                - Для получения ресурса, используйте <b>GET</b>. <br/>
                - Чтобы поменять состояние ресурса или обновить его, используйте <b>PUT</b>. <br/>
                - Чтобы отменить или удалить ресурс, используйте <b>DELETE</b>. <br/><br/>
            </p>
        </div>
        <div class="col-md-5">
            <img src="/img/api3.png" alt="Landing page" title="Landing page" class="img-fluid" />
        </div>

        <div class="col-md-12">
            <p class="text-justify">
                Заметьте, что правила выше необязательны, на самом деле вы можете метод  GET чтобы получить данные,
                вставлять, менять или удалять данные на Сервере. Но REST дает правила выше которые нацелены все
                прояснить и объяснить. <br/><br/>

                Иногда Клиет может определить виды возвращенных данных, которые он хочет (JSON, или XML,..), эти
                определения называются видами MINE, который прикреплен к HEADER запроса. <br/><br/>

                Ниже перечислены распространенные виды MINE использующиеся с  REST service. <br/>
                MIME-Type	Content-Type: <br/>
                - <b>JSON</b>	application/json <br/>
                - <b>XML</b>	application/xml <br/>
                - <b>XHTML</b>	application/xhtml+xml <br/><br/>

                Например Клиент отправляет запрос на получение информации про погоду, и требует возвратные данные в
                формате XML. <br/><br/>
            </p>
        </div>

        <div class="col-md-12">
            <h2 class="text-center text-design2">Выводы</h2> <br/>
        </div>
        <div class="col-md-12">
            <p class="text-justify">
                Благодаря API и http(s), а также формату обмена данными JSON мы можем организовать отдачу данных для
                мобильных приложений разработанных на Android или другой программе способной получать и обрабатывать
                данные в виде JSON. Это очень удобный формат передачи данных.
                На сегодняшний день это делают все приложения разработанные под мобильные телефоны. <br/><br/>
            </p>
            <br/><br/>
        </div>
    </div>

@endsection
